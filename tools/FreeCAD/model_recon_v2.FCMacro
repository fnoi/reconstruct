import json
import numpy as np

try:
    import Part
    import Mesh
    import Draft
    import Arch
    import BOPTools

    import importOBJ
except ImportError as e:
    print('FreeCAD is not available, running standalone.')
    print(e)



if __name__ == '__main__':

    try:
        App = FreeCAD
    except NameError as e:
        print('FreeCAD is not available, running standalone.')
        print(e)

    path_local = '/Users/fnoic/PycharmProjects/reconstruct/'
    path_config = 'config_reconstruct_a.json'
    # load yaml file content
    config = json.load(open(path_local + path_config, 'r'))

    with open(path_local + config['path_skeleton'], 'rb') as f:
        skeleton_dict = json.load(f)

    try:
        App.newDocument(config['export_filename'])
        fcdoc = App.getDocument(config['export_filename'])
        body = fcdoc.addObject('PartDesign::Body', 'Body')
    except Exception as e:
        print('FreeCAD is not available, running standalone.')
        print(e)

    for bone_flag in skeleton_dict.keys():
        bone_id = int(bone_flag.split('_')[1])
        bone = skeleton_dict[bone_flag]
        start = np.asarray(bone['start'])
        end = np.asarray(bone['end'])
        # cs vertices
        beam_verts = np.asarray(bone['beam_verts'])
        beam_verts = np.hstack((beam_verts, np.zeros((beam_verts.shape[0], 1))))

        # define T_delta, rotation matrix
        delta_x = beam_verts[0, 0] + (np.max(beam_verts[:, 0] - np.min(beam_verts[:, 0])) / 2)
        delta_y = beam_verts[0, 1] + (np.max(beam_verts[:, 1] - np.min(beam_verts[:, 1])) / 2)
        delta_z = bone['start'][2]
        T_delta = np.asarray([[1, 0, 0, -delta_x],
                              [0, 1, 0, -delta_y],
                              [0, 0, 1, -delta_z],
                              [0, 0, 0, 1]])

        beam_verts[:, 0] = beam_verts[:, 0] - delta_x
        beam_verts[:, 1] = beam_verts[:, 1] - delta_y
        beam_verts[:, 2] = beam_verts[:, 2] - delta_z

        # rotation matrix
        rot_mat = np.asarray(bone['rot_mat'])
        # rot_mat = rot_mat.T

        # create placement
        try:
            pl = FreeCAD.Placement()
            pl.Base = FreeCAD.Vector(T_delta[0][3], T_delta[1][3], T_delta[2][3])
            pl.Rotation = FreeCAD.Rotation(rot_mat[0][0], rot_mat[0][1], rot_mat[0][2],
                                           rot_mat[1][0], rot_mat[1][1], rot_mat[1][2],
                                           rot_mat[2][0], rot_mat[2][1], rot_mat[2][2])
            # pl.Transformation = T_delta
            fcdoc.recompute()

            # create bone line
            vector = np.asarray([bone['end'][i] - bone['start'][i] for i in range(3)])
            length = np.linalg.norm(vector)
            points = [FreeCAD.Vector(0, 0, 0),
                      FreeCAD.Vector(0, 0, length)]
            line = Draft.make_wire(points, placement=pl, closed=False, face=True, support=None)
            Draft.autogroup(line)
            fcdoc.recompute()

            # pl.Rotation.Matrix = rot_mat

            # create offset on yz plane with x coordinate of midpoint + rotated plane
            point = FreeCAD.ActiveDocument.addObject("Part::Vertex", f"Point{bone_id}")
            point.X = 0
            point.Y = 0
            point.Z = 0

            # create cross-section
            fcdoc.getObject('Body').newObject('Sketcher::SketchObject', f'cross_section{bone_id}')
            polygon = fcdoc.getObject(f'cross_section{bone_id}')
            polygon.MapMode = 'FlatFace'
            polygon_edges = []
            for i in range(len(beam_verts)):
                if i != len(beam_verts) - 1:
                    polygon_edges.append((i, i + 1))
                else:
                    polygon_edges.append((i, 0))

            for edge in polygon_edges:
                polygon.addGeometry(Part.LineSegment(
                    App.Vector(beam_verts[edge[0]][0], beam_verts[edge[0]][1], beam_verts[edge[0]][2]),
                    App.Vector(beam_verts[edge[1]][0], beam_verts[edge[1]][1], beam_verts[edge[1]][2])),
                    False
                )
            # polygon.Placement = pl
            Draft.autogroup(polygon)
            fcdoc.recompute()
            #
            # execute sweep operation
            fcdoc.addObject('Part::Sweep', f'beam{bone_id}')
            sweep = fcdoc.getObject(f'beam{bone_id}')
            sweep.Sections = polygon
            sweep.Spine = line
            sweep.Solid = True
            sweep.Frenet = False

            # apply rotation
            sweep.Placement = pl


            fcdoc.recompute()
            fcdoc.recompute()

        except Exception as e:
            print('FreeCAD is not available, running standalone.')
            print(e)

        # break

    raise Exception('hello silly my old friend')
